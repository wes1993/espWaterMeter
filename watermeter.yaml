substitutions:
  vdate: "V06.02.23" 
  date: "06-02-2023"
  device_description: ${name} Versione Software ${vdate} - ${date}.
  impulslengte: "50ms" #30ms of 50ms zie datasheet van het type meter
  name: S0tool

esphome:
  name: s0tool-standard-5c9aa5
  comment: '${device_description}'
  project:
    name: wes1993.${name}
    version: "${vdate}"
  platform: esp8266
  board: d1_mini
  esp8266_restore_from_flash: true 
  
#  on_boot:
#    then:
#      - pulse_counter.set_total_pulses:
#          id: watermeter_total_liter
#          value: !lambda "return id(total_water_liter);"
  
preferences:
  flash_write_interval: 120min

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#------------------------##------------------------##------------------------##------------------------#
# ⬇ Hieronder niets veranderen tenzij je het overal goed aanpast ⬇ #
# ⬇ Schakel fallback-hotspot (captive portal) in voor het geval de wifi-verbinding mislukt ⬇ #
  ap:
    ssid: "${name}"
    ap_timeout: 15s
 
# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:
  # Optionally, preserve provisioned credentials
  # over subsequent OTA updates.
#  keep_user_credentials: true

web_server:
  port: 80
# ⬇ Enable logging ⬇ # 
logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: false
  
#  # ⬇ Enable Home Assistant API ⬇ # 
api:
  services:
    - service: meterstand_water
      variables:
        meter_value: float
      then:
        - globals.set:
            id: initial_water_usage
#            value: !lambda "return ( meter_value - (id(total_water_pulses)) * atof(id(Select_pulse_water).state.c_str()) ) ;"
            value: !lambda "return ( meter_value ) ;"  
#        - globals.set:
#            id: total_water_pulses
#            value:  "0" 
     



globals:
  - id: initial_water_usage
    type: int
    restore_value: no      
    initial_value: '0'
  - id: total_water_liter
    type: float
    restore_value: yes


ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  
#  ⬇ Enable time component voor reset elke nacht ⬇ #
time:
  - platform: homeassistant
    id: time_homeassistant
    on_time_sync:
      - component.update: S0tool_uptime_timestamp

number:

##   # ⬇ water per m3 rate ⬇ #
##number:
#  - platform: template
#    id: Select_pulse_water
#    name: 'Pulsrate water per m3'
#    optimistic: true
#    mode: box
#    min_value: '0.0001'
#    max_value: '0.1'
#    step: '1'
#    restore_value: yes
#    initial_value: '0.001'



##------------------------# Watermeter #------------------------#
#binary_sensor:
#  - platform: gpio
#    id: internal_pulse_counter
#    name: Pulse Sensor Water
#    internal: True
#    pin:
#      number: D2
#      inverted: true
#      mode:
#        input: true
#    on_press:
#      - then:
#          lambda: id(total_water_pulses) += 1;   


sensor:
#------------------------# Watermeter #------------------------#
# ⬇ watermeter pulsen ⬇ #
  - platform: pulse_counter #pulse_counter
    pin: D2
    id: watermeter_pulse
    name: "watermeter pulse"
    unit_of_measurement: "l/min"
    accuracy_decimals: 1
    update_interval: 15s
    icon: "mdi:water-pump"
    filters:
      lambda: return (x / 450.0);
    total:
      id: watermeter_total_liter
      unit_of_measurement: 'L'
      name: 'Water Meter Total'
      accuracy_decimals: 1
      filters:
      - lambda: |-
  #          id(total_water_liter) = id(total_water_liter) + ((id(watermeter_pulse).raw_state) / 450);
            return (x / 450.0);
      
      
      
# ⬇ Waterpulses ⬇ #
  - platform: template
    id: watermeter_test_total
    name: "Total Liter"
    state_class: "total_increasing"
    accuracy_decimals: 1
    lambda: return id(total_water_liter);
#    internal: True



## ⬇ Totaal watermeter ⬇ #      
#    total:
#      id: sensor_pulse_meter_total
#      name: "watermeter Totaal"
#      unit_of_measurement: "m³"
#      state_class: total_increasing
#      device_class: water
#      accuracy_decimals: 3
#      filters:
##        lambda: return x * atof(id(Select_pulse_water).state.c_str());
#        lambda: return id (id(total_water_pulses) * (1.0 / id(Select_pulse_water).state) );     
#      
## ⬇ Watermeter stand bij benadering ⬇ #
#  - platform: template
#    id: watermeter_total
#    name: "watermeter stand"
#    state_class: "total_increasing"
#    icon: mdi:water
#    unit_of_measurement: "m³"
#    accuracy_decimals: 3
##    lambda: return id(initial_water_usage) + (id(total_water_pulses) * atof(id(Select_pulse_water).state.c_str()));
#    lambda: return id(initial_water_usage) + (id(total_water_pulses) * (1.0 / id(Select_pulse_water).state) );
#      
## ⬇ Waterpulses ⬇ #
#  - platform: template
#    id: watermeter_pulses
#    name: "watermeter pulses totaal"
#    state_class: "total_increasing"
#    accuracy_decimals: 0
#    lambda: return id(total_water_pulses) / 450;
##    internal: True












#------------------------#  sensoren #------------------------#
  - platform: uptime
    id: S0tool_uptime

  - platform: template
    id: S0tool_uptime_timestamp
    name: "${name} online sinds"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    icon: 'mdi:clock-start' 
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(S0tool_uptime).state
      );
      return timestamp;  

# ⬇ versie verbinding informatie sensoren voor in ha ⬇ #
  # WiFi signal
  - platform: wifi_signal
    name: "${name} - WiFi Signal"
    update_interval: 120s
    
text_sensor:
  - platform: template
    name: "s0tool_versie"
    id: s0tool_versie
    icon: 'mdi:alpha-v-circle-outline' 
    update_interval: 6h
    lambda: |-
      return {"${vdate}"};

  - platform: wifi_info
    ip_address:
      name: "${name} IP-adres"
      id: s0tool_ip_adres
      icon: mdi:ip-network
    ssid:
      name: "${name} Netwerk"
      id: s0tool_netwerk
      icon: mdi:access-point-network
    mac_address:
      name: "${name} Mac-adres"
      id: s0tool_mac_adres
      icon: mdi:folder-key-network-outline

#  restart button  #
button:  
  - platform: restart
    name: "${name} Restart device"
